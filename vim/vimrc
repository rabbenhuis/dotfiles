" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker:
"
"===============================================================================
"
"   Personal vimrc file.
"
"   Copyright (C) 2014 by Richard Abbenhuis
"
"   Permission is hereby granted, free of charge, to any person obtaining a
"   copy of this software and associated documentation files (the "Software"),
"   to deal in the Software without restriction, including without l> imitation
"   the rights to use, copy, modify, merge, publish, distribute, sublicense,
"   and/or sell copies of the Software, and to permit persons to whom the
"   Software is furnished to do so, subject to the following conditions:
"
"   The above copyright notice and this permission notice shall be included in
"   all copies or substantial portions of the Software.
"
"   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
"   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
"   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
"   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
"   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
"   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
"   DEALINGS IN THE SOFTWARE.
"
"   Description:
"
"   The vimrc file contains my personal runtime configuration settings
"   to initialize Vim when it starts.
"
"   Revisions:
"   11-11-2014  R. Abbenhuis    Created vimrc
"   20-11-2014  R. Abbenhuis    Added pathogen and solarized
"   25-11-2014  R. Abbenhuis    Added Vim UI, Formatting, Key (re)mappings
"                               and Functions section
"   07-01-2016  R. Abbenhuis    Disabled NERDTree
"
"===============================================================================
" }

" Environment {

    " Identify platform {

        silent function! IsLinux()
            return has('unix') && !has('macunix') && !has('win32unix')
        endfunction

        silent function! IsWindows()
            return (has('win16') || has('win32') || has('win64'))
        endfunction

    " }

    " Basics {

        set nocompatible" Must be the first line

        if (IsWindows())
            set shell=powershell.exe
        elseif (IsLinux())
            set shell=/bin/bash
        endif

    " }

    " Windows Compatible {

        " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
        " across (heterogeneous) systems easier.
        "
        if (IsWindows())
            set runtimepath=$HOME/.vim
            set runtimepath+=$VIM/vimfiles
            set runtimepath+=$VIMRUNTIME
            set runtimepath+=$VIM/vimfiles/after
            set runtimepath+=$HOME/.vim/after
        endif

    " }

    " Pathogen {

        execute pathogen#infect()
        execute pathogen#helptags()

    " }

" }

 " General {

    if (has('menu') && has('multi_lang'))
        set langmenu=none
    endif

"    set background=light            " Assume a light background
    set background=dark              " Assume a dark background

    filetype plugin indent on       " Automatically detect file type types
    syntax on                       " Syntax highlighting
    set mouse=a                     " Automatically enable mouse usage
    set mousehide                   " Hide the mouse cursor while typing
    scriptencoding utf-8

    "set autowrite                   " Automatically write a file when leaving a modified buffer
    set autoread                    " Automatically re-read the file when it is changed outside Vim
    set shortmess+=filmnrxoOtT      " Abbrev. of messages (avoids 'hit enter')
    set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
    set virtualedit=onemore         " Allow for cursor beyond last character
    set history=1000                " Store a ton of history (default is 20)
    "set spell                       " Spell checking on
    set hidden                      " Allow buffer switching without saving

    " Setting up the directories {
        set backup                  " Backups are nice ...
        if has('persistent_undo')
            set undofile            " So is persistent undo ...
            set undolevels=1000     " Maximum number of changes that can be undone
            set undoreload=10000    " Maximum number lines to save for undo on a buffer reload
        endif
    " }

" }

" Vim UI {

    set showmode                    " Display the current mode

    set cursorline                  " Highlight current line

    highlight clear SignColumn      " SignColumn should match background
    highlight clear LineNr          " Current line number row will have same background color in relative mode
    "highlight clear CursorLineNr    " Remove highlight color from current line number

    if has('cmdline_info')
        set ruler                   " Show the ruler
        set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
        set showcmd                 " Show partial commands in status line and
                                    " Selected characters/lines in visual mode
    endif

    if has('statusline')
        set laststatus=2

        " Broken down into easily includeable segments
        "
        set statusline=%<%f\                        " Filename
        set statusline+=%w%h%m%r                    " Options
        set statusline+=%#warningmsg#
        set statusline+=%{SyntasticStatuslineFlag()}
        set statusline+=%*
        set statusline+=%{fugitive#statusline()}    " Git Hotness
        set statusline+=\ [%{&ff}/%Y]               " Filetype
        set statusline+=\ [%{getcwd()}]             " Current directory
        set statusline+=%=%-14.(%l,%c%V%)\ %p%%     " Right aligned file nav info
    endif

    set backspace=indent,eol,start  " Backspace for dummies
    set linespace=0                 " No extra spaces between rows
    set number                      " Line numbers on
    set showmatch                   " Show matching brackets/parenthesis
    set incsearch                   " Find as you type search
    set hlsearch                    " Highlight search terms
    set winminheight=0              " Windows can be 0 line high
    set ignorecase                  " Case insensitive search
    set smartcase                   " Case sensitive when uc present
    set wildmenu                    " Show list instead of just completing
    set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
    set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
    set scrolljump=5                " Lines to scroll when cursor leaves screen
    set scrolloff=3                 " Minimum lines to keep above and below cursor
    set foldenable                  " Auto fold code
"    set list
"    set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace

" }

" Formatting {

    set nowrap                      " Do not wrap long lines
    set autoindent                  " Indent at the same level of the previous line
    set shiftwidth=4                " Use indents of 4 spaces
    set expandtab                   " Tabs are spaces, not tabs
    set tabstop=4                   " An indentation every four columns
    set softtabstop=4               " Let backspace delete indent
    set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
    set splitright                  " Puts new vsplit windows to the right of the current
    set splitbelow                  " Puts new split windows to the bottom of the current
    "set matchpairs+=<:>             " Match, to be used with %
    set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)

" }

" Key (re)Mappings {

" }

" Plugins {

    " Solarized {

        if has('gui_running')
            let g:solarized_termcolors=256      " Use 256 colors
            let g:solarized_contrast="high"     " Set the contrast to high
            let g:solarized_visibility="high"   " Set the visibility of special characters to high
        else
            let g:solarized_termcolors=&t_Co    " Use the number of terminal colors degreaded color mode
            let g:solarized_contrast="normal"   " Set the contrast to normal
            let g:solarized_visibility="normal" " Set the visibility of special characters to normal
        endif

        let g:solarized_termtrans=1             " Set the default (transparant) background

        colorscheme solarized                   " Enable the colorscheme

    " }

    " TSkeleton {

        let g:tskelUserName="Richard Abbenhuis"
        let g:tskelUserEmail="richard@abbenhuis.net"
        let g:tskelUserCompany="TenneT TSO B.V."
        let g:tskelDateFormat="%m/%d/%Y"
        let g:tskelLicense="All rights reserved"


    " }

    " NERDTree {

"        autocmd vimenter * NERDTree $HOME

"        let NERDTreeShowHidden=0
"        let NERDTreeShowBookmarks=1
"        let NERDTreeIgnore=['^NTUSER.DAT*', '^ntuser.*']
"        let NERDTreeChDirMode=2

    " }

    " MiniBufExplorer {

        let g:miniBufExplAutoStart=1
        let g:miniBufExplBuffersNeeded=2
        let g:miniBufExplMinSize=2
        let g:miniBufExplBRSplit=0
        let g:miniBufExplSplitToEdge=0
        let g:miniBufExplUseSingleClick=1

    " }

    " Syntastic {

        let g:syntastic_always_populate_loc_list = 1
        let g:syntastic_auto_loc_list = 1
        let g:syntastic_check_on_open = 1
        let g:syntastic_check_on_wq = 0

    " }
" }

" Functions {

    " Initialize directories {

        function! InitializeDirectories()
            let parent = $HOME
            let prefix = 'vim'
            let dir_list = {
                        \ 'backup': 'backupdir',
                        \ 'views': 'viewdir',
                        \ 'swap': 'directory' }

            if has('persistent_undo')
                let dir_list['undo'] = 'undodir'
            endif

            let common_dir = parent . '/.' . prefix

            for [dirname, settingname] in items(dir_list)
                let directory = common_dir . dirname . '/'
                if exists("*mkdir")
                    if !isdirectory(directory)
                        call mkdir(directory)
                    endif
                endif

                if !isdirectory(directory)
                    echo "Warning: Unable to create backup directory: " . directory
                    echo "Try: mkdir -p " . directory
                else
                    let directory = substitute(directory, " ", "\\\\ ", "g")
                    exec "set " . settingname . "=" . directory
                endif
            endfor
        endfunction

        call InitializeDirectories()
    " }
" }


